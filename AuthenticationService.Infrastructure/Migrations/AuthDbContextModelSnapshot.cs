// <auto-generated />
using System;
using AuthenticationService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthenticationService.Infrastructure.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.AccessTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Jti")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("token")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessToken");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Claim");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dee05e65-6d95-431f-b953-5f84c31bdb8a"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "CreateUser"
                        },
                        new
                        {
                            Id = new Guid("0f47684b-731d-4cf2-af24-6fc25ee28afe"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "CreateClaim"
                        },
                        new
                        {
                            Id = new Guid("69a79790-c73a-4e9c-b130-22384187b5f1"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "DeleteUser"
                        },
                        new
                        {
                            Id = new Guid("ef0b9bff-5634-44b0-9610-b887788f80a4"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "BlockUser"
                        },
                        new
                        {
                            Id = new Guid("8b70ae03-a428-46c1-8e26-daed1cebd841"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "GetClaims"
                        },
                        new
                        {
                            Id = new Guid("ce9be9f4-05ce-4763-8087-16222efe65e8"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "GetUserClaims"
                        },
                        new
                        {
                            Id = new Guid("68ac2926-0ae0-400e-8206-0097875cc414"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "GetRoles"
                        },
                        new
                        {
                            Id = new Guid("dcf5116b-20e2-477d-8086-166a49201ada"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "GetUsers"
                        },
                        new
                        {
                            Id = new Guid("76842170-e73a-4f2b-9aaf-0351ecb0d862"),
                            Issuer = "Authentication service",
                            Type = "AuthenticationService",
                            Value = "AddClaimsToUser"
                        });
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("Jti")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Jti")
                        .IsUnique()
                        .HasFilter("[Jti] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizeRole")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizeRole")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dee05e65-6d95-431f-b953-5f84c31be546"),
                            Description = "Admin user",
                            NormalizeRole = "ADMIN",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("32a24807-eda2-4f86-88ca-0a6264706994"),
                            Description = "Base user",
                            NormalizeRole = "USER",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.UserClaimEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("IpAddresses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dee05e65-6d95-431f-b953-5f84c31bde8c"),
                            Created = new DateTime(2022, 12, 2, 15, 31, 34, 62, DateTimeKind.Local).AddTicks(4025),
                            IpAddresses = "0.0.0.1",
                            IsActive = true,
                            IsDeleted = false,
                            NormalizedUserName = "SUPERUSER",
                            Password = "1",
                            UserName = "SuperUser"
                        });
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("dee05e65-6d95-431f-b953-5f84c31bde8c"),
                            RoleId = new Guid("dee05e65-6d95-431f-b953-5f84c31be546")
                        });
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.AccessTokenEntity", b =>
                {
                    b.HasOne("AuthenticationService.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("AuthenticationService.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.UserClaimEntity", b =>
                {
                    b.HasOne("AuthenticationService.Infrastructure.Entities.ClaimEntity", "Claim")
                        .WithMany("Users")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationService.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("AuthenticationService.Infrastructure.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationService.Infrastructure.Entities.UserEntity", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.ClaimEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthenticationService.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("Claims");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
