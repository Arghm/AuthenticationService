// <auto-generated />
using System;
using AuthenticationService.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthenticationService.Migrations.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20221211183630_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.AccessTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamptz");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("Jti")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessToken");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Claim");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2276e40d-bae0-4b78-8968-784ffd3b91a0"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "CreateUser"
                        },
                        new
                        {
                            Id = new Guid("9a8aea34-96f6-4f66-9712-bb6af72298c8"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "UpdateUser"
                        },
                        new
                        {
                            Id = new Guid("6175c84d-143a-493c-91ac-ee7bcce18bd9"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "CreateClaim"
                        },
                        new
                        {
                            Id = new Guid("d9df1ee5-614d-4c5f-97ec-96edd32e6818"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "DeleteUser"
                        },
                        new
                        {
                            Id = new Guid("6ef5f8cc-cfa9-47d8-834d-c6163c44cc54"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "GetClaims"
                        },
                        new
                        {
                            Id = new Guid("1fe742d8-8b46-4e86-8d37-57b613105f9e"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "GetUserClaims"
                        },
                        new
                        {
                            Id = new Guid("4609c1ce-a9f6-4c9e-ad06-407fb78dfe7b"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "GetRoles"
                        },
                        new
                        {
                            Id = new Guid("9dd0342f-d827-4d82-915d-cef218c58c6f"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "GetUsers"
                        },
                        new
                        {
                            Id = new Guid("b752b927-fc95-447a-9256-fd737804960c"),
                            Issuer = "AuthenticationService",
                            Type = "http://schemas.microsoft.com/ws/2008/06/identity/claims/userdata",
                            Value = "AddClaimsToUser"
                        });
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bool");

                    b.Property<string>("Jti")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Jti")
                        .IsUnique()
                        .HasFilter("[Jti] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("NormalizeRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizeRole")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a404953c-d47b-4075-9027-0a4350f52160"),
                            Description = "Admin user",
                            NormalizeRole = "ADMIN",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b582e5d0-6f55-4b2e-82a4-d9c4c58cb54a"),
                            Description = "Base user",
                            NormalizeRole = "USER",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.UserClaimEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClaimId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("UserClaim");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9ffc9b38-1ead-4373-a913-718f67165c3b"),
                            ClaimId = new Guid("9dd0342f-d827-4d82-915d-cef218c58c6f")
                        });
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamptz");

                    b.Property<string>("IpAddresses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bool");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bool");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a056cb-4854-43bd-baba-28fb6f3a8b4d"),
                            Created = new DateTime(2022, 12, 11, 21, 36, 30, 105, DateTimeKind.Local).AddTicks(9278),
                            IpAddresses = "0.0.0.1",
                            IsActive = true,
                            IsDeleted = false,
                            NormalizedUserName = "SUPERUSER",
                            Password = "xsZQBit3Q2p+6szmN3kadwhNrbYgyLjI|100|0d//leOyX3Rab9ZEoez4Xv91FRyTlzYa",
                            UserName = "SuperUser"
                        },
                        new
                        {
                            Id = new Guid("9ffc9b38-1ead-4373-a913-718f67165c3b"),
                            Created = new DateTime(2022, 12, 11, 21, 36, 30, 106, DateTimeKind.Local).AddTicks(9039),
                            IpAddresses = "0.0.0.1",
                            IsActive = true,
                            IsDeleted = false,
                            NormalizedUserName = "USER1",
                            Password = "mcaEigKpY/fMUDJ+guhfwihvkZFP8/1a|100|rVFQMn3mjsYonSzleF9Om9r3SFY/a+3J",
                            UserName = "User1"
                        });
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e1a056cb-4854-43bd-baba-28fb6f3a8b4d"),
                            RoleId = new Guid("a404953c-d47b-4075-9027-0a4350f52160")
                        });
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.AccessTokenEntity", b =>
                {
                    b.HasOne("AuthenticationService.Contracts.Repositories.Entities.UserEntity", "User")
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("AuthenticationService.Contracts.Repositories.Entities.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.UserClaimEntity", b =>
                {
                    b.HasOne("AuthenticationService.Contracts.Repositories.Entities.ClaimEntity", "Claim")
                        .WithMany("Users")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationService.Contracts.Repositories.Entities.UserEntity", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("AuthenticationService.Contracts.Repositories.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationService.Contracts.Repositories.Entities.UserEntity", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.ClaimEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthenticationService.Contracts.Repositories.Entities.UserEntity", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("Claims");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
